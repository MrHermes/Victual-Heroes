package vh.scene;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;

import vh.main.GameMain;
import vh.ui.Button;
import static vh.main.GameStates.*;

public class MainMenu extends GameScene implements SceneMethods {

//	private BufferedImage map;
//	private BufferedImage sprite;
//	private BufferedImage mapIMG;
//	private BufferedImage spriteIMG;
	private BufferedImage mainMenu;
	private BufferedImage mainMenuIMG;
	private Random rand;
	private Button playingButton, settingButton, quitButton; 
	
	//private ArrayList<BufferedImage> sprites = new ArrayList<>();
	
	public MainMenu(GameMain game) {
		super(game);
		importImg();
		//this.map = mapIMG;
		//this.sprite = spriteIMG;
		this.mainMenu = mainMenuIMG;
		//loadSprites();
		this.rand = new Random();
		initializeButton();
	}

	private void initializeButton() {

		int x = 1024;
		int y = 576;
		
		int buttonWidth = 100;
		int buttonHeight = 30;
		
		playingButton = new Button("Play", ((x / 2) - (2 *(buttonWidth / 5))) , (2 * (y / 5)), buttonWidth, buttonHeight, 0);
		settingButton = new Button("Settings", ((x / 2) - (2 *(buttonWidth / 5))), (3 * (y / 5)), buttonWidth, buttonHeight, 1);
		quitButton = new Button("Quit", ((x / 2) - (2 *(buttonWidth / 5))), (4 * (y / 5)), buttonWidth, buttonHeight, 2);
	}

	@Override
	public void render(Graphics g) {
		
		g.drawImage(mainMenu, 0, 0, null);
		
		drawButtons(g);
		
		/*
		g.drawImage(map, 0, 0, null);
		g.drawImage(sprites.get(0), 0, 0, null);
		for (int i = 0 ; i < 16 ; i++) {
			for (int j = 0 ; j < 9; j++){
				g.drawImage(sprites.get(getRX()), i*40, j*40, null);
			}
		}
		*/
	}
	
	private void drawButtons(Graphics g) {
		
		playingButton.draw(g);
		settingButton.draw(g);
		quitButton.draw(g);
	}

	private void importImg() {
			
		InputStream is = getClass().getResourceAsStream("mainMenu.png");
		try {
			this.mainMenuIMG = ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
//	private void loadSprites() {
//		for (int i = 0 ; i < 14 ; i++)
//		{
//			for (int j = 0 ; j < 5 ; j++)
//			{
//				sprites.add(sprite.getSubimage(i*17, j*29, 17, 29));
//			}
//		}
//	}
	
	private int getRX() {
		return rand.nextInt(14);
	}
	
	private int getRY() {
		return rand.nextInt(5);
	}

	public void mouseClicked(int x, int y) {

		if(playingButton.getBounds().contains(x, y)) {
			setGameState(PLAYING);
		}
		
		else if(settingButton.getBounds().contains(x, y)) {
			setGameState(SETTINGS);
		}

		else if(quitButton.getBounds().contains(x, y)) {
			System.exit(1);
		}
		
	}

	public void mouseMoved(int x, int y) {
		// TODO Auto-generated method stub
		playingButton.setMouseOverButton(false);
		settingButton.setMouseOverButton(false);
		quitButton.setMouseOverButton(false);
		if(playingButton.getBounds().contains(x, y)) {
			playingButton.setMouseOverButton(true);
		}
		
		else if(settingButton.getBounds().contains(x, y)) {
			settingButton.setMouseOverButton(true);
		}
		
		else if(quitButton.getBounds().contains(x, y)) {
			quitButton.setMouseOverButton(true);
		}
	}

	public void mousePressed(int x, int y) {
		
		//playingButton.setMouseOverButton(false);
		if(playingButton.getBounds().contains(x, y)) {
			playingButton.setMousePressedButton(true);
		}
		
		else if(settingButton.getBounds().contains(x, y)) {
			settingButton.setMousePressedButton(true);
		}
		
		else if(quitButton.getBounds().contains(x, y)) {
			quitButton.setMousePressedButton(true);
		}
		
	}

	@Override
	public void mouseReleased(int x, int y) {
		// TODO Auto-generated method stub
		playingButton.resetMouseState();
		settingButton.resetMouseState();
		quitButton.resetMouseState();
	}

	@Override
	public void keyTyped(int n) {
		// TODO Auto-generated method stub
		
	}

}
