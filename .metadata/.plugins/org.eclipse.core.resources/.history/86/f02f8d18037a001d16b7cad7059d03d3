package vh.objectManagers;

import java.awt.Graphics;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import vh.helper.Constants.Enemies;
import vh.hungries.Hungries;
import vh.helper.LoadSave;
import vh.object.Stall;
import vh.object.StallFood;
import vh.scene.Playing;
import static vh.helper.Constants.Towers.*;
import static vh.helper.Constants.TowerProjectiles.*;

public class StallFoodManager {
	
	private Playing playing;
	private ArrayList<StallFood> foods = new ArrayList<>();
	private BufferedImage[] foodImages, explodeImages;
	private int foodId = 0;
	private boolean explode = false;
	private int explosionTick, explosionIndex = 0;
	private Point2D.Float explosionPos;
	
	public StallFoodManager (Playing playing) {
		this.playing = playing;
		importing();
	}
	
	private void importing() {
		
		BufferedImage foodAtlas = LoadSave.getFoodAtlas();
		this.foodImages = new BufferedImage[3];
		
		for (int i = 0; i < 3; i++) {
			foodImages[i] = foodAtlas.getSubimage(16*i, 0, 16, 16);
		}
		
		importAnimation();
	}
	
	public void importAnimation() {
		BufferedImage tempAtlas = LoadSave.getTempAtlas();
		explodeImages = new BufferedImage[7];
		
		for (int i = 0 ; i < 7 ; i++) {
			explodeImages[i] = tempAtlas.getSubimage(i*32, 32*7, 32, 32);
		}
	}
	
	public void newFood(Stall s, Hungries e) {
		int type = getFoodType(s);
		int damage = getDefaultDamage(type);
		
		int xDistance = (int) Math.abs(s.getX() - e.getX());
		int yDistance = (int) Math.abs(s.getY() - e.getY());
		int totalDistance = xDistance + yDistance;
		
		float xProportion = (float) xDistance/ totalDistance;
		//float yProportion = 1.0f - xProportion;
				
		float xSpeed = xProportion * vh.helper.Constants.TowerProjectiles.getSpeed(s.getStallType());
		float ySpeed = vh.helper.Constants.TowerProjectiles.getSpeed(s.getStallType()) - xSpeed;
	
		if (s.getX() > e.getX()) {
			xSpeed = -xSpeed;
		}
		if (s.getY() > e.getY()) {
			ySpeed = -ySpeed;
		}
		
		foods.add(new StallFood((s.getX() + s.getStallSize()/2), (s.getY() + s.getStallSize()/2), xSpeed, ySpeed, foodId++ , damage,  type));
		
	}
	
	private int getFoodType(Stall s) {
		switch(s.getStallType()) {
			case PUKIS :
				return P_PUKIS;
			case BAKSO :
				return P_BAKSO;
			case ESCAMPUR :
				return P_ESCAMPUR;
			case WOOD :
				return WOODS;
		}
		return 0;
	}

	public void update() {
		for (StallFood p : foods) {
			if (p.isActive()) {
				p.move();
				if (isFoodHitEnemy(p)) {
					p.setActive(false);
					if(p.getFoodType() == P_BAKSO) {
						explode = true;
						explosionPos = p.getPosition();
					}
				}else {
					// nothing for now
				}
			}
		}
		
		if(explode) {
			explosionTick++;
			if (explosionTick >= 12) {
				explosionTick = 0;
				explosionIndex++;
				if (explosionIndex >= 7) {
					explosionIndex = 0;
					explode = false;
				}
			}
		}
	}
	
	private boolean isFoodHitEnemy(StallFood p) {
		for (Hungries e : playing.getHungriesManager().getAllHungries()) {
			if (e.getBound().contains(p.getPosition())) {
					e.attacked(p.getFoodDamage());
					return true;
			}
		}
		return false;
	}

	public void draw(Graphics g) {
		
		for (StallFood p : foods) {
			if (p.isActive())
				g.drawImage(foodImages[p.getFoodType()], (int) p.getPosition().getX(), (int) p.getPosition().getY(), null);
		}
		
		drawExplosion(g);
	}

	private void drawExplosion(Graphics g) {
		if (explode) {
			g.drawImage(explodeImages[explosionIndex], (int)explosionPos.x, (int)explosionPos.y, null);
		}
	}
	
	public class Explosion {
		
		private Point2D.Float explosionPos;
		private int explosionTick = 0, explosionIndex = 0;
		
		public Explosion(Point2D.Float pos, int tick, int idx) {
			
		}
		
		public void update() {
			
		}
		
		public Point2D.Float getPosition(){
			return explosionPos;
		}
	}

}
