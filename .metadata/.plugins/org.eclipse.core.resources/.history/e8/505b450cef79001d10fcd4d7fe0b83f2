package vh.objectManagers;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.imageio.ImageIO;

import vh.helper.Constants.Enemies;
import vh.hungries.Hungries;
import vh.helper.LoadSave;
import vh.object.Tower;
import vh.object.TowerProjectile;
import vh.scene.Playing;
import static vh.helper.Constants.Towers.*;
import static vh.helper.Constants.TowerProjectiles.*;

public class StallFoodManager {
	
	private Playing playing;
	private ArrayList<TowerProjectile> towerProjectiles = new ArrayList<>();
	private BufferedImage[] projectile_Images;
	private int projectile_Id = 0;
	
	public StallFoodManager (Playing playing) {
		this.playing = playing;
		importing();
	}
	
	private void importing() {
		
		BufferedImage projectileAtlas = LoadSave.getProjectileAtlas();
		this.projectile_Images = new BufferedImage[3];
		
		for (int i = 0; i < 3; i++) {
			projectile_Images[i] = projectileAtlas.getSubimage(16*i, 0, 16, 16);
		}
		
//		BufferedImage esCampurTemp = null;
//		InputStream is;
//		
//		try {
//			is = LoadSave.class.getClassLoader().getResourceAsStream("es campur projectile.png");
//			esCampurTemp = ImageIO.read(is);
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//		projectile_Images[ESCAMPUR] = esCampurTemp;
	}
	
	public void newProjectile(Tower t, Hungries e) {
		int type = getProjectileType(t);
		int damage = getDefaultDamage(type);
		
		int xDistance = (int) Math.abs(t.getX() - e.getX());
		int yDistance = (int) Math.abs(t.getY() - e.getY());
		int totalDistance = xDistance + yDistance;
		
		float xProportion = (float) xDistance/ totalDistance;
		//float yProportion = 1.0f - xProportion;
				
		float xSpeed = xProportion * vh.helper.Constants.TowerProjectiles.getSpeed(t.getTowerType());
		float ySpeed = vh.helper.Constants.TowerProjectiles.getSpeed(t.getTowerType()) - xSpeed;
	
		if (t.getX() > e.getX()) {
			xSpeed = -xSpeed;
		}
		if (t.getY() > e.getY()) {
			ySpeed = -ySpeed;
		}
		
		towerProjectiles.add(new TowerProjectile((t.getX() + t.getTowerSize()/2), (t.getY() + t.getTowerSize()/2), xSpeed, ySpeed, projectile_Id++ , damage,  type));
		
	}
	
	private int getProjectileType(Tower t) {
		switch(t.getTowerType()) {
			case PUKIS :
				return P_PUKIS;
			case BAKSO :
				return P_BAKSO;
			case ESCAMPUR :
				return P_ESCAMPUR;
			case WOOD :
				return WOODS;
		}
		return 0;
	}

	public void update() {
		for (TowerProjectile p : towerProjectiles) {
			if (p.isActive()) {
				p.move();
				if (isProjectileHitEnemy(p)) {
					p.setActive(false);
				}else {
					// nothing for now
				}
			}
		}
	}
	
	private boolean isProjectileHitEnemy(TowerProjectile p) {
		for (Hungries e : playing.getEnemyManager().getEnemies()) {
			if (e.getBound().contains(p.getPosition())) {
					e.attacked(p.getProjectileDamage());
					return true;
			}
		}
		return false;
	}

	public void draw(Graphics g) {
		for (TowerProjectile p : towerProjectiles) {
			if (p.isActive())
				g.drawImage(projectile_Images[p.getProjectileType()], (int) p.getPosition().getX(), (int) p.getPosition().getY(), null);
		}
	}

}
