package vh.main;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class GameMain extends JFrame implements Runnable {
	private GameScreen screen;
	private BufferedImage mapIMG;
	private BufferedImage spriteIMG;
	
	private Thread gameThread;
	
	private final double SET_FPS = 120.0;
	private final double SET_UPS = 60.0;
	
	public GameMain() {
		
		importImg();
		
//		setSize(800, 600);
		setSize(730, 430);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		this.screen = new GameScreen(mapIMG, spriteIMG);
		add(screen);
		setVisible(true);
	}

	private void importImg() {
		InputStream is = getClass().getResourceAsStream("/croppedmap.jpeg");
		try {
			this.mapIMG = ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		is = getClass().getResourceAsStream("/marioatlas.png");
		try {
			this.spriteIMG = ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void updateGame()
	{
		//IDK
	}
	
	private void startGame()
	{
		gameThread = new Thread(this) {
		};
		
		gameThread.start();
	}

	public static void main(String[] args) {
		GameMain game = new GameMain();
		game.startGame();
		
//		Thread t = new Thread(new Runnable() {
//
//			@Override
//			public void run() {
//				// TODO Auto-generated method stub
//				
//			}
//		});
	}

	@Override
	public void run() 
	{
		double timePerFrame = 1000000000.0 / SET_FPS;
		double timePerUpdate = 1000000000.0 / SET_UPS;
		
		long lastUpdate = System.nanoTime();
		long lastFrame = System.nanoTime();
		
		int frames = 0;
		int updates = 0;
		
		long lastTimeCheck = System.currentTimeMillis();
		
		while(true)
		{
			//Render
			if (System.nanoTime() - lastFrame >= timePerFrame)
			{
				lastFrame = System.nanoTime();
				repaint();
				frames++;
			}
			
			//Update
			if (System.nanoTime() - lastUpdate >= timePerUpdate)
			{
				lastUpdate = System.nanoTime();
				updates++;
			}
			
			//Check FPS & UPS
			if (System.currentTimeMillis() - lastTimeCheck >= 1000)
			{
				System.out.println("FPS : " + frames + ", UPS : " + updates);
				frames = 0;
				updates = 0;
				lastTimeCheck = System.currentTimeMillis();
			}
		}
		
	}

}